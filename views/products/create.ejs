<%- include('../layouts/app', { title: 'Create Product' }) %>

<div class="pagetitle">
    <div class="row">
        <div class="col-8">
            <h1>Products</h1>
            <nav>
                <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="<%= route('home') %>">Home</a></li>
                <li class="breadcrumb-item">Create Product</li>
                </ol>
            </nav>
        </div>
        <div class="col-4">
        <% if (user.can(['write_products'])) { %>
        <table class="table table-borderless">
            <tbody>
            <tr>
                <td><a href="<%= route('locations.sync') %>" style="float: right;" class="btn btn-success" id="syncLocations">Sync Locations</a></td>
                <td><a href="<%= route('shopify.products') %>" style="float: right" class="btn btn-primary">Back</a></td>
            </tr>
            </tbody>
        </table>
        <% } %>
        </div>
    </div>
</div>
<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Create a product</h5>
                    <!-- Floating Labels Form -->
                    <form id="productForm" class="row g-3" method="POST" action="<%= route('shopify.product.publish') %>">
                       <!-- <input type="hidden" name="_csrf" value="<%= csrfToken %>"> -->
                        <div class="col-md-12">
                            <div class="form-floating">
                            <input type="text" class="form-control" id="floatingName" name="title" placeholder="Product Name/Title" required>
                            <label for="floatingName">Product Name/Title</label>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-floating">
                            <textarea class="form-control" placeholder="Product Description" id="floatingTextarea" style="height: 100px;" name="desc" required></textarea>
                            <label for="floatingTextarea">Description</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input type="text" class="form-control" name="product_type" id="floatingProductType" placeholder="Product Type" required>
                                    <label for="floatingProductType">Product Type</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input type="text" class="form-control" name="vendor" id="floatingVendor" placeholder="Vendor" required>
                                    <label for="floatingVendor">Vendor</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input type="text" class="form-control" name="tags" id="floatingCostPerItem" placeholder="Tags" required>
                                    <label for="floatingCostPerItem">Tags</label>
                                </div>
                            </div>
                        </div>
                        <div class="card-body row g-3" id="variantsRow">
                            <h5 class="card-title">Variant Details</h5>
                            <%- include('partials/add_variant', { count: 1 }) %>
                        </div>
                        <div class="card-body" style="float:left">
                            <a href="#" class="btn btn-success btn-md add_variant">Add a Variant</a>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" style="width:40%">Create</button>
                        </div>
                    </form><!-- End floating Labels Form -->
                </div>
            </div>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // Function to add a new variant row
    function addVariantRow() {
        // Get the current number of variants
        const count = document.querySelectorAll('#variantsRow .variant_info').length + 1;
        
        // Find the first variant to clone its inventory structure
        const firstVariant = document.querySelector('#variantsRow .pb-4');
        const hasInventorySection = firstVariant.querySelector('.row:nth-child(2)');
        
        // Create the HTML for the new variant row
        let variantHtml = `
        <div class="pb-4" style="border: 1px dotted black">
            <div class="row col-md-12 mt-2 variant_info">
                <label for="" class="mt-2 mb-2"><b>Variant #${count}</b>
                <a class="btn btn-danger remove_variant" style="margin-left:50px">X</a></label>    
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" class="form-control variant-field" data-field="title" placeholder="Title" required>
                        <label for="floatingVariantTitle">Title</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="text" class="form-control variant-field" data-field="sku" placeholder="SKU" required>
                        <label for="floatingSKU">SKU</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-field" data-field="price" placeholder="Price" required>
                        <label for="floatingVariantPrice">Price</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-field" data-field="compare_at_price" placeholder="Compare At Price" required>
                        <label for="floatingCompareAtVariantPrice">Compare At Price</label>
                    </div>
                </div>
            </div>`;
        
        // If there's an inventory section in the first variant, clone its structure
        if (hasInventorySection) {
            const inventorySection = hasInventorySection.cloneNode(true);
            
            // Update the inventory inputs
            const inputs = inventorySection.querySelectorAll('input');
            inputs.forEach(input => {
                const locationId = input.name.split('_')[0];
                input.setAttribute('data-location', locationId);
                input.setAttribute('data-field', 'inventory');
                input.className = 'form-control variant-field inventory-field';
                input.removeAttribute('name');
                input.value = ''; // Clear the value
            });
            
            variantHtml += inventorySection.outerHTML;
        }
        
        variantHtml += `</div>`;
        
        document.getElementById('variantsRow').insertAdjacentHTML('beforeend', variantHtml);
    }

    // Update the first variant to use data-field attributes instead of name attributes
    function updateFirstVariant() {
        const firstVariant = document.querySelector('#variantsRow .pb-4');
        if (!firstVariant) return;
        
        // Update variant fields
        const variantInputs = firstVariant.querySelectorAll('input[name^="variant_"], input[name^="sku"]');
        variantInputs.forEach(input => {
            if (input.name === 'variant_title[]') {
                input.setAttribute('data-field', 'title');
            } else if (input.name === 'sku[]') {
                input.setAttribute('data-field', 'sku');
            } else if (input.name === 'variant_price[]') {
                input.setAttribute('data-field', 'price');
            } else if (input.name === 'variant_caprice[]') {
                input.setAttribute('data-field', 'compare_at_price');
            }
            input.className = 'form-control variant-field';
            input.removeAttribute('name');
        });
        
        // Update inventory fields
        const inventoryInputs = firstVariant.querySelectorAll('input[name$="_inventory_1"]');
        inventoryInputs.forEach(input => {
            const locationId = input.name.split('_')[0];
            input.setAttribute('data-location', locationId);
            input.setAttribute('data-field', 'inventory');
            input.className = 'form-control variant-field inventory-field';
            input.removeAttribute('name');
        });
    }

    // Call this function when the page loads
    updateFirstVariant();

    document.querySelector('.add_variant').addEventListener('click', function (e) {
        e.preventDefault();
        addVariantRow();
    });

    document.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('remove_variant')) {
            e.preventDefault();
            e.target.closest('.pb-4').remove();
        }
    });

    // Form submission handler
    document.getElementById('productForm').addEventListener('submit', function(e) {
        // Don't prevent default, we'll let the form submit naturally
        // But we need to transform our variant fields into the expected format

        // First remove any previously added hidden inputs to avoid duplicates
        const existingInputs = document.querySelectorAll('input[name^="variants["]');
        existingInputs.forEach(input => input.remove());
        
        // Get all variants containers
        const variantContainers = document.querySelectorAll('#variantsRow .pb-4');
        
        // Collect variant data
        variantContainers.forEach((container, index) => {
            // Basic variant fields
            if (container.querySelector('.variant-field[data-field="title"]')) {
                const titleInput = document.createElement('input');
                titleInput.type = 'hidden';
                titleInput.name = 'variants[variant_title][]';
                titleInput.value = container.querySelector('.variant-field[data-field="title"]').value;
                this.appendChild(titleInput);
            }
            
            if (container.querySelector('.variant-field[data-field="sku"]')) {
                const skuInput = document.createElement('input');
                skuInput.type = 'hidden';
                skuInput.name = 'variants[sku][]';
                skuInput.value = container.querySelector('.variant-field[data-field="sku"]').value;
                this.appendChild(skuInput);
            }
            
            if (container.querySelector('.variant-field[data-field="price"]')) {
                const priceInput = document.createElement('input');
                priceInput.type = 'hidden';
                priceInput.name = 'variants[variant_price][]';
                priceInput.value = container.querySelector('.variant-field[data-field="price"]').value;
                this.appendChild(priceInput);
            }
            
            if (container.querySelector('.variant-field[data-field="compare_at_price"]')) {
                const capriceInput = document.createElement('input');
                capriceInput.type = 'hidden';
                capriceInput.name = 'variants[variant_caprice][]';
                capriceInput.value = container.querySelector('.variant-field[data-field="compare_at_price"]').value;
                this.appendChild(capriceInput);
            }
            
            // Inventory fields
            const inventoryFields = container.querySelectorAll('.inventory-field');
            inventoryFields.forEach(field => {
                const locationId = field.getAttribute('data-location');
                const inventoryInput = document.createElement('input');
                inventoryInput.type = 'hidden';
                inventoryInput.name = `variants[inventory][${locationId}][]`;
                inventoryInput.value = field.value;
                this.appendChild(inventoryInput);
            });
        });
        
        // Submit the form
        // this.submit(); - Not needed since we're not preventing default
    });

    const syncLocationsBtn = document.querySelector('#syncLocations');
    if (syncLocationsBtn) {
        syncLocationsBtn.addEventListener('click', function(e) {
            e.preventDefault();
            
            syncLocationsBtn.innerHTML = 'Syncing...';
            syncLocationsBtn.disabled = true;
            console.log(this.href); 
            
            fetch(this.href, {
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data && Array.isArray(data)) {
                    updateVariantRowsWithLocations(data);
                    
                    alert('Locations synced successfully!');
                } else {
                    throw new Error('Invalid response format');
                }
            })
            .catch(error => {
                console.error('Error syncing locations:', error);
                alert('Failed to sync locations. Please try again.');
            })
            .finally(() => {
                syncLocationsBtn.innerHTML = 'Sync Locations';
                syncLocationsBtn.disabled = false;
            });
        });
    }

    // Function to update all variant rows with new location data
    function updateVariantRowsWithLocations(locations) {
        const variantContainers = document.querySelectorAll('#variantsRow .pb-4');
        
        variantContainers.forEach((container, index) => {
            const variantNum = index + 1;
            const existingInventorySection = container.querySelector('.row:nth-child(2)');
            
            // Create new inventory section HTML
            let inventoryHtml = `
            <div class="row col-md-12 mt-2">
                <label for="" class="mt-2 mb-2"><b>Inventory Info</b></label>`;
                
            locations.forEach(location => {
                inventoryHtml += `
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-field inventory-field" 
                               data-location="${location.id}" 
                               data-field="inventory"
                               placeholder="Inventory" required>
                        <label>${location.name}</label>
                    </div>
                </div>`;
            });
            
            inventoryHtml += `</div>`;
            
            // If there's an existing inventory section, replace it
            if (existingInventorySection) {
                existingInventorySection.outerHTML = inventoryHtml;
            } else {
                // Otherwise, append the new inventory section
                container.insertAdjacentHTML('beforeend', inventoryHtml);
            }
        });
    }
}); 
</script>
