<%- include('../layouts/app', { title: 'Create Product' }) %>

<div class="pagetitle">
    <div class="row">
        <div class="col-8">
            <h1>Products</h1>
            <nav>
                <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="<%= route('home') %>">Home</a></li>
                <li class="breadcrumb-item">Create Product</li>
                </ol>
            </nav>
        </div>
        <div class="col-4">
        <% if (user.can(['write_products'])) { %>
        <table class="table table-borderless">
            <tbody>
            <tr>
                <td><a href="<%= route('locations.sync') %>" style="float: right;" class="btn btn-success" id="syncLocations">Sync Locations</a></td>
                <td><a href="<%= route('shopify.products') %>" style="float: right" class="btn btn-primary">Back</a></td>
            </tr>
            </tbody>
        </table>
        <% } %>
        </div>
    </div>
</div>
<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Create a product</h5>
                    <!-- Floating Labels Form -->
                    <form id="productForm" class="row g-3" method="POST" action="<%= route('shopify.product.publish') %>">
                       <!-- <input type="hidden" name="_csrf" value="<%= csrfToken %>"> -->
                        <div class="col-md-12">
                            <div class="form-floating">
                            <input type="text" class="form-control" id="floatingName" name="title" placeholder="Product Name/Title" required>
                            <label for="floatingName">Product Name/Title</label>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-floating">
                            <textarea class="form-control" placeholder="Product Description" id="floatingTextarea" style="height: 100px;" name="desc" required></textarea>
                            <label for="floatingTextarea">Description</label>
                            </div>
                        </div>
                        
                        <!-- Category Selection - Multi-level dropdowns -->
                        <div class="col-md-4">
                            <div class="row">
                                <div class="col-md-12 mb-3">
                                    <label for="product-type-level1" class="form-label">Product Category (required)</label>
                                    <select class="form-select" id="product-type-level1" name="product_type_1" required>
                                        <option value="" selected disabled>Select Category Level 1</option>
                                        <option value="Animals & Pet Supplies">Animals & Pet Supplies</option>
                                        <option value="Apparel & Accessories">Apparel & Accessories</option>
                                        <option value="Arts & Entertainment">Arts & Entertainment</option>
                                        <option value="Baby & Toddler">Baby & Toddler</option>
                                        <option value="Business & Industrial">Business & Industrial</option>
                                        <option value="Cameras & Optics">Cameras & Optics</option>
                                        <option value="Electronics">Electronics</option>
                                        <option value="Food, Beverages & Tobacco">Food, Beverages & Tobacco</option>
                                        <option value="Furniture">Furniture</option>
                                        <option value="Gift Cards">Gift Cards</option>
                                        <option value="Hardware">Hardware</option>
                                        <option value="Health & Beauty">Health & Beauty</option>
                                        <option value="Home & Garden">Home & Garden</option>
                                        <option value="Luggage & Bags">Luggage & Bags</option>
                                        <option value="Mature">Mature</option>
                                        <option value="Media">Media</option>
                                        <option value="Office Supplies">Office Supplies</option>
                                        <option value="Product Add-Ons">Product Add-Ons</option>
                                        <option value="Religious & Ceremonial">Religious & Ceremonial</option>
                                        <option value="Services">Services</option>
                                        <option value="Software">Software</option>
                                        <option value="Sporting Goods">Sporting Goods</option>
                                        <option value="Toys & Games">Toys & Games</option>
                                        <option value="Uncategorized">Uncategorized</option>
                                        <option value="Vehicles & Parts">Vehicles & Parts</option>
                                    </select>
                                </div>
                                
                                <div class="col-md-12 mb-3">
                                    <label for="product-type-level2" class="form-label">Sub Category (Optional)</label>
                                    <select class="form-select" id="product-type-level2" name="product_type_2" disabled>
                                        <option value="" selected disabled>Select Category Level 2</option>
                                        <!-- Level 2 options will be populated by JavaScript -->
                                    </select>
                                </div>
                                
                                <div class="col-md-12">
                                    <label for="product-type-level3" class="form-label">Sub Category (Optional)</label>
                                    <select class="form-select" id="product-type-level3" name="product_type_3" disabled>
                                        <option value="" selected disabled>Select Category Level 3</option>
                                        <!-- Level 3 options will be populated by JavaScript -->
                                    </select>
                                </div>
                                
                                <!-- Hidden field to store the final product type -->
                               <!-- <input type="hidden" name="product_type" id="product_type_field"> -->
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input type="text" class="form-control" name="vendor" id="floatingVendor" placeholder="Vendor" required>
                                    <label for="floatingVendor">Vendor</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input type="text" class="form-control" name="tags" id="floatingCostPerItem" placeholder="Tags" required>
                                    <label for="floatingCostPerItem">Tags</label>
                                </div>
                            </div>
                        </div>
                        <div class="card-body row g-3" id="variantsRow">
                            <h5 class="card-title">Variant Details</h5>
                            <%- include('partials/add_variant', { count: 1 }) %>
                        </div>
                        <div class="card-body" style="float:left">
                            <a href="#" class="btn btn-success btn-md add_variant">Add a Variant</a>
                        </div>
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" style="width:40%">Create</button>
                        </div>
                    </form><!-- End floating Labels Form -->
                </div>
            </div>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // Shopify category hierarchy
    const categoryHierarchy = {
        "Animals & Pet Supplies": ["Pet Supplies", "Live Animals"],
        "Apparel & Accessories": ["Clothing", "Clothing Accessories", "Costumes & Accessories", "Jewelry", "Shoes"],
        "Arts & Entertainment": ["Event Tickets", "Hobbies & Creative Arts", "Party & Celebration"],
        "Baby & Toddler": ["Baby Accessories", "Baby Food", "Baby Furniture", "Baby Safety", "Baby Toys"],
        "Business & Industrial": ["Agriculture", "Construction", "Industrial Supplies", "Medical", "Office"],
        "Cameras & Optics": ["Cameras", "Photography", "Optics", "Camera Accessories"],
        "Electronics": ["Audio", "Video", "Computers", "Electronics Accessories", "Networking"],
        "Food, Beverages & Tobacco": ["Food", "Beverages", "Tobacco Products"],
        "Furniture": ["Bedroom", "Living Room", "Kitchen", "Office", "Outdoor"],
        "Gift Cards": ["Gift Cards", "Prepaid Cards"],
        "Hardware": ["Building Materials", "Hardware Accessories", "Tools"],
        "Health & Beauty": ["Beauty Products", "Personal Care", "Health Care"],
        "Home & Garden": ["Home Decor", "Household Supplies", "Kitchen & Dining", "Lawn & Garden"],
        "Luggage & Bags": ["Backpacks", "Briefcases", "Handbags", "Luggage", "Wallets"],
        "Mature": ["Adult", "Weapons & Hunting"],
        "Media": ["Books", "Digital Content", "Electronics Media", "Magazines & Newspapers", "Music", "Videos"],
        "Office Supplies": ["Office Equipment", "Office Furniture", "Office Supplies"],
        "Product Add-Ons": ["Product Warranties", "Product Bundles"],
        "Religious & Ceremonial": ["Memorial Items", "Religious Items", "Wedding Ceremony"],
        "Services": ["Business Services", "Education", "Entertainment", "Financial Services"],
        "Software": ["Computer Software", "Mobile Apps", "Video Game Software"],
        "Sporting Goods": ["Athletics", "Exercise & Fitness", "Indoor Games", "Outdoor Recreation"],
        "Toys & Games": ["Baby Toys", "Board Games", "Dolls & Figures", "Puzzles", "Video Games"],
        "Uncategorized": ["Miscellaneous"],
        "Vehicles & Parts": ["Vehicle Parts & Accessories", "Vehicles"]
    };
    
    // Level 3 categories - specific to the "Media > Books" path
    const level3Categories = {
        "Books": ["Audiobooks", "E-Books", "Print Books"],
        "Magazines & Newspapers": ["Digital Magazines", "Print Magazines", "Newspapers"],
        "Music": ["Digital Music", "Music Albums", "Sheet Music"],
        "Videos": ["Movies", "TV Shows", "Online Videos"]
        // Add other Level 2 > Level 3 mappings as needed
    };
    
    // Function to add a new variant row
    function addVariantRow() {
        // Get the current number of variants
        const count = document.querySelectorAll('#variantsRow .variant_info').length + 1;
        
        // Find the first variant to clone its inventory structure
        const firstVariant = document.querySelector('#variantsRow .pb-4');
        const hasInventorySection = firstVariant.querySelector('.row:nth-child(2)');
        
        // Create the HTML for the new variant row
        let variantHtml = `
        <div class="pb-4" style="border: 1px dotted black">
            <div class="row col-md-12 mt-2 variant_info">
                <label for="" class="mt-2 mb-2"><b>Variant #${count}</b>
                <a class="btn btn-danger remove_variant" style="margin-left:50px">X</a></label>    
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" class="form-control variant-field" data-field="title" placeholder="Title" required>
                        <label for="floatingVariantTitle">Title</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="text" class="form-control variant-field" data-field="sku" placeholder="SKU" required>
                        <label for="floatingSKU">SKU</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-field" data-field="price" placeholder="Price" required>
                        <label for="floatingVariantPrice">Price</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-field" data-field="compare_at_price" placeholder="Compare At Price" required>
                        <label for="floatingCompareAtVariantPrice">Compare At Price</label>
                    </div>
                </div>
            </div>`;
        
        // If there's an inventory section in the first variant, clone its structure
        if (hasInventorySection) {
            const inventorySection = hasInventorySection.cloneNode(true);
            
            // Update the inventory inputs
            const inputs = inventorySection.querySelectorAll('input');
            inputs.forEach(input => {
                const locationId = input.name.split('_')[0];
                input.setAttribute('data-location', locationId);
                input.setAttribute('data-field', 'inventory');
                input.className = 'form-control variant-field inventory-field';
                input.removeAttribute('name');
                input.value = ''; // Clear the value
            });
            
            variantHtml += inventorySection.outerHTML;
        }
        
        variantHtml += `</div>`;
        
        document.getElementById('variantsRow').insertAdjacentHTML('beforeend', variantHtml);
    }

    // Update the first variant to use data-field attributes instead of name attributes
    function updateFirstVariant() {
        const firstVariant = document.querySelector('#variantsRow .pb-4');
        if (!firstVariant) return;
        
        // Update variant fields
        const variantInputs = firstVariant.querySelectorAll('input[name^="variant_"], input[name^="sku"]');
        variantInputs.forEach(input => {
            if (input.name === 'variant_title[]') {
                input.setAttribute('data-field', 'title');
            } else if (input.name === 'sku[]') {
                input.setAttribute('data-field', 'sku');
            } else if (input.name === 'variant_price[]') {
                input.setAttribute('data-field', 'price');
            } else if (input.name === 'variant_caprice[]') {
                input.setAttribute('data-field', 'compare_at_price');
            }
            input.className = 'form-control variant-field';
            input.removeAttribute('name');
        });
        
        // Update inventory fields
        const inventoryInputs = firstVariant.querySelectorAll('input[name$="_inventory_1"]');
        inventoryInputs.forEach(input => {
            const locationId = input.name.split('_')[0];
            input.setAttribute('data-location', locationId);
            input.setAttribute('data-field', 'inventory');
            input.className = 'form-control variant-field inventory-field';
            input.removeAttribute('name');
        });
    }

    // Call this function when the page loads
    updateFirstVariant();

    document.querySelector('.add_variant').addEventListener('click', function (e) {
        e.preventDefault();
        addVariantRow();
    });

    document.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('remove_variant')) {
            e.preventDefault();
            e.target.closest('.pb-4').remove();
        }
    });

    // Category selection logic
    const level1Select = document.getElementById('product-type-level1');
    const level2Select = document.getElementById('product-type-level2');
    const level3Select = document.getElementById('product-type-level3');
    //const productTypeField = document.getElementById('product_type_field');
    
    // When Level 1 category changes
    level1Select.addEventListener('change', function(e) {
        const selectedLevel1 = this.value;
        
        // Clear and disable Level 3
        level3Select.innerHTML = '<option value="" selected disabled>Select Category Level 3</option>';
        level3Select.disabled = true;
        
        // Clear and update Level 2
        level2Select.innerHTML = '<option value="" selected disabled>Select Category Level 2</option>';
        
        if (selectedLevel1 && categoryHierarchy[selectedLevel1]) {
            // Add Level 2 options
            categoryHierarchy[selectedLevel1].forEach(level2Category => {
                const option = document.createElement('option');
                option.value = level2Category;
                option.textContent = level2Category;
                level2Select.appendChild(option);
            });
            
            level2Select.disabled = false;
        } else {
            level2Select.disabled = true;
        }
        
        // Update product type field
        updateProductTypeField();
    });
    
    // When Level 2 category changes
    level2Select.addEventListener('change', function(e) {
        const selectedLevel2 = this.value;
        
        // Clear and update Level 3
        level3Select.innerHTML = '<option value="" selected disabled>Select Category Level 3</option>';
        
        if (selectedLevel2 && level3Categories[selectedLevel2]) {
            // Add Level 3 options
            level3Categories[selectedLevel2].forEach(level3Category => {
                const option = document.createElement('option');
                option.value = level3Category;
                option.textContent = level3Category;
                level3Select.appendChild(option);
            });
            
            level3Select.disabled = false;
        } else {
            level3Select.disabled = true;
        }
        
        // Update product type field
        updateProductTypeField();
    });
    
    // When Level 3 category changes
    level3Select.addEventListener('change', function(e) {
        // Update product type field
        updateProductTypeField();
    });
   
   /**
    // Update the hidden product_type field with the full category path
    function updateProductTypeField() {
        const level1 = level1Select.value || '';
        const level2 = level2Select.value || '';
        const level3 = level3Select.value || '';
        
        let productType = '';
        
        if (level1) {
            productType = level1;
            if (level2) {
                productType += ' > ' + level2;
                if (level3) {
                    productType += ' > ' + level3;
                }
            }
        }
        
        productTypeField.value = productType;
    }
    */

    // Form submission handler
    document.getElementById('productForm').addEventListener('submit', function(e) {
        // Make sure the product type is set before submitting
        updateProductTypeField();
        
        // Don't prevent default, we'll let the form submit naturally
        // But we need to transform our variant fields into the expected format

        // First remove any previously added hidden inputs to avoid duplicates
        const existingInputs = document.querySelectorAll('input[name^="variants["]');
        existingInputs.forEach(input => input.remove());
        
        // Get all variants containers
        const variantContainers = document.querySelectorAll('#variantsRow .pb-4');
        
        // Collect variant data
        variantContainers.forEach((container, index) => {
            // Basic variant fields
            if (container.querySelector('.variant-field[data-field="title"]')) {
                const titleInput = document.createElement('input');
                titleInput.type = 'hidden';
                titleInput.name = 'variants[variant_title][]';
                titleInput.value = container.querySelector('.variant-field[data-field="title"]').value;
                this.appendChild(titleInput);
            }
            
            if (container.querySelector('.variant-field[data-field="sku"]')) {
                const skuInput = document.createElement('input');
                skuInput.type = 'hidden';
                skuInput.name = 'variants[sku][]';
                skuInput.value = container.querySelector('.variant-field[data-field="sku"]').value;
                this.appendChild(skuInput);
            }
            
            if (container.querySelector('.variant-field[data-field="price"]')) {
                const priceInput = document.createElement('input');
                priceInput.type = 'hidden';
                priceInput.name = 'variants[variant_price][]';
                priceInput.value = container.querySelector('.variant-field[data-field="price"]').value;
                this.appendChild(priceInput);
            }
            
            if (container.querySelector('.variant-field[data-field="compare_at_price"]')) {
                const capriceInput = document.createElement('input');
                capriceInput.type = 'hidden';
                capriceInput.name = 'variants[variant_caprice][]';
                capriceInput.value = container.querySelector('.variant-field[data-field="compare_at_price"]').value;
                this.appendChild(capriceInput);
            }
            
            // Inventory fields
            const inventoryFields = container.querySelectorAll('.inventory-field');
            inventoryFields.forEach(field => {
                const locationId = field.getAttribute('data-location');
                const inventoryInput = document.createElement('input');
                inventoryInput.type = 'hidden';
                inventoryInput.name = `variants[inventory][${locationId}][]`;
                inventoryInput.value = field.value;
                this.appendChild(inventoryInput);
            });
        });
    });

    const syncLocationsBtn = document.querySelector('#syncLocations');
    if (syncLocationsBtn) {
        syncLocationsBtn.addEventListener('click', function(e) {
            e.preventDefault();
            
            syncLocationsBtn.innerHTML = 'Syncing...';
            syncLocationsBtn.disabled = true;
            console.log(this.href); 
            
            fetch(this.href, {
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data && Array.isArray(data)) {
                    updateVariantRowsWithLocations(data);
                    
                    alert('Locations synced successfully!');
                } else {
                    throw new Error('Invalid response format');
                }
            })
            .catch(error => {
                console.error('Error syncing locations:', error);
                alert('Failed to sync locations. Please try again.');
            })
            .finally(() => {
                syncLocationsBtn.innerHTML = 'Sync Locations';
                syncLocationsBtn.disabled = false;
            });
        });
    }

    // Function to update all variant rows with new location data
    function updateVariantRowsWithLocations(locations) {
        const variantContainers = document.querySelectorAll('#variantsRow .pb-4');
        
        variantContainers.forEach((container, index) => {
            const variantNum = index + 1;
            const existingInventorySection = container.querySelector('.row:nth-child(2)');
            
            // Create new inventory section HTML
            let inventoryHtml = `
            <div class="row col-md-12 mt-2">
                <label for="" class="mt-2 mb-2"><b>Inventory Info</b></label>`;
                
            locations.forEach(location => {
                inventoryHtml += `
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" class="form-control variant-field inventory-field" 
                               data-location="${location.id}" 
                               data-field="inventory"
                               placeholder="Inventory" required>
                        <label>${location.name}</label>
                    </div>
                </div>`;
            });
            
            inventoryHtml += `</div>`;
            
            // If there's an existing inventory section, replace it
            if (existingInventorySection) {
                existingInventorySection.outerHTML = inventoryHtml;
            } else {
                // Otherwise, append the new inventory section
                container.insertAdjacentHTML('beforeend', inventoryHtml);
            }
        });
    }
}); 
</script>
