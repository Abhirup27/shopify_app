<%- include('../layouts/app', { title: 'Create Product' }) %>

<div class="pagetitle">
    <div class="row">
        <div class="col-8">
            <h1>Products</h1>
            <nav>
                <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="<%= route('home', {storeId: storeId}) %>">Home</a></li>
                <li class="breadcrumb-item">Create Product</li>
                </ol>
            </nav>
        </div>
        <div class="col-4">
        <% if (user.can(['write_products'])) { %>
        <table class="table table-borderless">
            <tbody>
            <tr>
                <td><a href="<%= route('locations.sync', {storeId: storeId}) %>" style="float: right;" class="btn btn-success" id="syncLocations">Sync Locations</a></td>
                <td><a href="<%= route('shopify.products', {storeId: storeId}) %>" style="float: right" class="btn btn-primary">Back</a></td>
            </tr>
            </tbody>
        </table>
        <% } %>
        </div>
    </div>
</div>

<section class="section">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Create a product</h5>
                    <!-- Floating Labels Form -->
                    <form id="productForm" class="row g-3" method="POST" action="<%= route('shopify.product.publish' , {storeId: storeId}) %>">
                        <div class="col-md-12">
                            <div class="form-floating">
                            <input type="text" class="form-control" id="floatingName" name="title" placeholder="Product Name/Title" required>
                            <label for="floatingName">Product Name/Title</label>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-floating">
                            <textarea class="form-control" placeholder="Product Description" id="floatingTextarea" style="height: 100px;" name="desc" required></textarea>
                            <label for="floatingTextarea">Description</label>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="form-floating">
                                <input type="text" class="form-control" name="vendor" id="floatingVendor" placeholder="Vendor" required>
                                <label for="floatingVendor">Vendor</label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-floating">
                                <input type="text" class="form-control" name="tags" id="floatingCostPerItem" placeholder="Tags" required>
                                <label for="floatingCostPerItem">Tags</label>
                            </div>
                        </div>
                        
                        <!-- Category Selection - Dynamic categories -->
                        <div class="col-md-12 mt-3">
                            <div class="row" id="category-container">
                                <div class="col-md-4">
                                    <label for="product-category-0" class="form-label">Product Category (required)</label>
                                    <select class="form-select product-category" id="product-category-0" name="product_type_1" data-level="0" required>
                                        <option value="" selected disabled>Select Category</option>
                                        <% if (typeof productTypes !== 'undefined') { %>
                                            <% Object.entries(productTypes).forEach(([id, name]) => { %>
                                            <option value="<%= id %>"><%= name %></option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card-body row g-3" id="variantsContainer">
                            <h5 class="card-title">Variant Details</h5>
                            <!-- Variants will be dynamically added here -->
                        </div>
                        
                        <div class="card-body" style="float:left">
                            <a href="#" class="btn btn-success btn-md" id="addVariantBtn">Add a Variant</a>
                        </div>
                        
                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" style="width:40%">Create</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
function saveFormData() {
    const formData = {
        title: document.getElementById('floatingName').value,
        desc: document.getElementById('floatingTextarea').value,
        vendor: document.getElementById('floatingVendor').value,
        tags: document.getElementById('floatingCostPerItem').value,
        categories: [],
        variants: []
    };

    // Save categories
    document.querySelectorAll('.product-category').forEach(select => {
        formData.categories.push({
            level: select.dataset.level,
            value: select.value
        });
    });

    // Save variants
    document.querySelectorAll('.variant-container').forEach(container => {
        const variant = {
            title: container.querySelector('.variant-title').value,
            sku: container.querySelector('.variant-sku').value,
            price: container.querySelector('.variant-price').value,
            compareAtPrice: container.querySelector('.variant-compare-price').value,
            inventory: []
        };

        // Save inventory
        container.querySelectorAll('.inventory-input').forEach(input => {
            variant.inventory.push({
                location: input.dataset.location,
                quantity: input.value
            });
        });

        formData.variants.push(variant);
    });

    sessionStorage.setItem('unsavedProductForm', JSON.stringify(formData));
}

// Restore form data from session storage

document.addEventListener('DOMContentLoaded', function () {
    let variantCount = 0;
    // Initialize locations from EJS data
    let locations = <%-JSON.stringify(locations || [])%>;
    
    // Initialize with one variant
    addVariant();

    // Variant management
    function addVariant() {
        variantCount++;
        const variantHtml = createVariantHtml(variantCount);
        document.getElementById('variantsContainer').insertAdjacentHTML('beforeend', variantHtml);
    }

    function createVariantHtml(variantNumber) {
        let inventoryHtml = '';
        
        // Create inventory fields for each location
        locations.forEach(location => {
            inventoryHtml += `
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" 
                               class="form-control inventory-input" 
                               data-variant="${variantNumber}" 
                               data-location="${location.id}"
                               placeholder="Quantity" 
                               min="0" 
                               value="0">
                        <label>${location.name}</label>
                    </div>
                </div>`;
        });

        return `
        <div class="variant-container pb-4" data-variant="${variantNumber}" style="border: 1px dotted black; margin-bottom: 20px; padding: 15px;">
            <div class="row col-md-12 mt-2">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <label class="form-label"><b>Variant #${variantNumber}</b></label>
                    <button type="button" class="btn btn-danger btn-sm remove-variant" data-variant="${variantNumber}">Remove</button>
                </div>
                
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" 
                               class="form-control variant-title" 
                               data-variant="${variantNumber}"
                               placeholder="Title" 
                               required>
                        <label>Variant Title</label>
                    </div>
                </div>
                
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="text" 
                               class="form-control variant-sku" 
                               data-variant="${variantNumber}"
                               placeholder="SKU" 
                               required>
                        <label>SKU</label>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" 
                               class="form-control variant-price" 
                               data-variant="${variantNumber}"
                               placeholder="Price" 
                               step="0.01" 
                               min="0" 
                               required>
                        <label>Price</label>
                    </div>
                </div>
                
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" 
                               class="form-control variant-compare-price" 
                               data-variant="${variantNumber}"
                               placeholder="Compare At Price" 
                               step="0.01" 
                               min="0" 
                               required>
                        <label>Compare At Price</label>
                    </div>
                </div>
            </div>
            
            ${locations.length > 0 ? `
            <div class="row col-md-12 mt-3">
                <label class="form-label"><b>Inventory</b></label>
                ${inventoryHtml}
            </div>` : ''}
        </div>`;
    }

    // Event listeners
    document.getElementById('addVariantBtn').addEventListener('click', function(e) {
        e.preventDefault();
        addVariant();
    });

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-variant')) {
            e.preventDefault();
            const variantNumber = e.target.getAttribute('data-variant');
            const variantContainer = document.querySelector(`[data-variant="${variantNumber}"]`);
            if (variantContainer) {
                variantContainer.remove();
            }
        }
    });

    // Category selection logic (unchanged)
    const categoryContainer = document.getElementById('category-container');
    
    function removeAllSubcategories(startLevel) {
        const selects = categoryContainer.querySelectorAll('.product-category');
        for (let i = 0; i < selects.length; i++) {
            const select = selects[i];
            const level = parseInt(select.getAttribute('data-level'));
            if (level > startLevel) {
                select.closest('.col-md-4').remove();
            }
        }
    }
    
    function createCategoryDropdown(level, id, name) {
        const col = document.createElement('div');
        col.className = 'col-md-4';
        col.innerHTML = `
            <label for="product-category-${level}" class="form-label">Subcategory (Optional)</label>
            <select class="form-select product-category" id="product-category-${level}" name="product_type_${level + 1}" data-level="${level}" data-parent="${id}">
                <option value="" selected disabled>Select Subcategory</option>
            </select>
        `;
        return col;
    }
    
    document.addEventListener('change', function(e) {
        if (e.target && e.target.classList.contains('product-category')) {
            const selectedId = e.target.value;
            const level = parseInt(e.target.getAttribute('data-level'));
            
            removeAllSubcategories(level);
            
            if (selectedId) {
                let id = selectedId.split('/').pop();
                
                fetch(`/product-categories/children/${id}`, {
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data && Object.entries(data).length > 0) {
                        const newLevel = level + 1;
                        const newDropdown = createCategoryDropdown(newLevel, id, e.target.options[e.target.selectedIndex].text);
                        categoryContainer.appendChild(newDropdown);
                        
                        const select = document.getElementById(`product-category-${newLevel}`);
                        Object.entries(data).forEach(([id, name]) => {
                            const option = document.createElement('option');
                            option.value = id;
                            option.textContent = name;
                            select.appendChild(option);
                        });
                    }
                })
                .catch(error => {
                    console.error(`Error fetching subcategories for level ${level + 1}:`, error);
                });
            }
        }
    });

    // Sync locations functionality
const syncLocationsBtn = document.querySelector('#syncLocations');
if (syncLocationsBtn) {
    syncLocationsBtn.addEventListener('click', async function(e) {
        e.preventDefault();
        
        syncLocationsBtn.innerHTML = 'Syncing...';
        syncLocationsBtn.disabled = true;
        
        try {
            const response = await fetch(this.href, {
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            // Handle HTTP errors (401 Unauthorized), server sends an Oauth url.
            if (response.status === 401) {
                saveFormData();
                
                const redirectUrl = await response.text();
                window.location.href = redirectUrl;  // Full page redirect
                return;
            }
            
            // Handle successful responses
            const data = await response.json();
            
            if (Array.isArray(data)) {
                locations = data;
                updateAllVariantsWithLocations();
                alert('Locations synced successfully!');
            } else {
                throw new Error('Invalid response format');
            }
        } catch (error) {
            console.error('Error syncing locations:', error);
            alert('Failed to sync locations. Please try again.');
        } finally {
            syncLocationsBtn.innerHTML = 'Sync Locations';
            syncLocationsBtn.disabled = false;
        }
    });
}

function updateAllVariantsWithLocations() {
        const variantContainers = document.querySelectorAll('.variant-container');
        variantContainers.forEach(container => {
            const variantNumber = container.getAttribute('data-variant');
            
            // Remove existing inventory section if it exists
            const existingInventory = container.querySelector('.row:last-child');
            if (existingInventory && existingInventory.querySelector('.inventory-input')) {
                existingInventory.remove();
            }
            
            // Add new inventory section
            let inventoryHtml = '';
            locations.forEach(location => {
                inventoryHtml += `
                    <div class="col-md-3">
                        <div class="form-floating">
                            <input type="number" 
                                   class="form-control inventory-input" 
                                   data-variant="${variantNumber}" 
                                   data-location="${location.id}"
                                   placeholder="Quantity" 
                                   min="0" 
                                   value="0">
                            <label>${location.name}</label>
                        </div>
                    </div>`;
            });
            
            const inventorySection = `
                <div class="row col-md-12 mt-3">
                    <label class="form-label"><b>Inventory</b></label>
                    ${inventoryHtml}
                </div>`;
            
            container.insertAdjacentHTML('beforeend', inventorySection);
        });
    }

    // Form submission - Convert to structured JSON
    document.getElementById('productForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Collect form data
        const formData = new FormData(this);
        const productData = {
            title: formData.get('title'),
            desc: formData.get('desc'),
            vendor: formData.get('vendor'),
            tags: formData.get('tags'),
            product_type: getSelectedProductType(),
            variants: collectVariantData()
        };

      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        // Send as JSON
      fetch(this.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'text/html, application/json',
          'x-csrf-token': csrfToken,
        },
        body: JSON.stringify(productData)
      })
        .then(response => {
          const contentType = response.headers.get('content-type');

          // Handles HTML response
          if (contentType && contentType.includes('text/html')) {
            sessionStorage.removeItem('unsavedProductForm');
            window.location.href = '<%= route("shopify.products") %>';
            return new Promise(() => {}); // Prevents further then() calls
          }

          // Handles JSON responses where the client may need to be redirected to Oauth shopify URL or some other error has occurred
          if (response.ok) {
            return response.json().then(data => {

              if (data.redirect_url) {
                // Full redirect to JSON-specified URL, for OAuth
                saveFormData();
                if(confirm("Store's access token has expired. Redirect to shopify for new token? Form data is saved on the server.")){
                  sessionStorage.removeItem('unsavedProductForm');
                  window.location.href = data.redirect_url;
                }

              } else if(data.error != undefined){ //some other error occurred, do not delete form data
                    saveFormData();
                    alert("Error ", data.error);
              }else {
                //if no error is returned in the response JSON, assume it is created
                sessionStorage.removeItem('unsavedProductForm');
                alert('Product created successfully!');
                window.location.href = '<%= route("shopify.products") %>';
              }
              return data;
            });
          }

          // Handle HTTP errors
          return response.json().then(errorData => {
            saveFormData();
            throw errorData; // Throw to trigger catch block
          }).catch(() => {
            throw new Error('Network response was not ok');
          });
        })
        .catch(error => {
          console.error('Error:', error);

          // Handle JSON error objects
          if (error && typeof error === 'object') {
            if (error.error) {
              alert(`Error: ${error.error}`);
            } else if (error.message) {
              alert(`Error: ${error.message}`);
            } else {
              alert('Error creating product. Please try again.');
            }
          } else {
            alert('Error creating product. Please try again.');
          }
        });
    });

    function getSelectedProductType() {
        const categorySelects = document.querySelectorAll('.product-category');
        let selectedValue = null;
        
        categorySelects.forEach(select => {
            if (select.value) {
                selectedValue = select.value;
            }
        });
        
        return selectedValue;
    }

    function collectVariantData() {
        const variants = [];
        const variantContainers = document.querySelectorAll('.variant-container');
        
        variantContainers.forEach(container => {
            const variantNumber = container.getAttribute('data-variant');
            
            const title = container.querySelector('.variant-title').value;
            const sku = container.querySelector('.variant-sku').value;
            const price = parseFloat(container.querySelector('.variant-price').value);
            const compareAtPrice = parseFloat(container.querySelector('.variant-compare-price').value);
            
            // Skip incomplete variants
            if (!title || !sku || isNaN(price) || isNaN(compareAtPrice)) {
                return;
            }
            
            // Collect inventory data
            const inventory = [];
            const inventoryInputs = container.querySelectorAll('.inventory-input');
            inventoryInputs.forEach(input => {
                const locationId = input.getAttribute('data-location');
                const quantity = parseInt(input.value) || 0;
                
                inventory.push({
                    locationId,
                    quantity
                });
            });
            
            variants.push({
                title,
                sku,
                price,
                compareAtPrice,
                inventory
            });
        });
        
        return variants;
    }
    function restoreFormData() {
    const savedData = sessionStorage.getItem('unsavedProductForm');
    if (!savedData) return false;

    try {
        const formData = JSON.parse(savedData);
        
        // Restore basic fields
        document.getElementById('floatingName').value = formData.title || '';
        document.getElementById('floatingTextarea').value = formData.desc || '';
        document.getElementById('floatingVendor').value = formData.vendor || '';
        document.getElementById('floatingCostPerItem').value = formData.tags || '';
        
        // Restore categories
        formData.categories.forEach(category => {
            const select = document.querySelector(`.product-category[data-level="${category.level}"]`);
            if (select) select.value = category.value;
        });
        
        // Remove existing variants
        document.querySelectorAll('.variant-container').forEach(el => el.remove());
        
        // Restore variants
        formData.variants.forEach(variantData => {
            addVariant();
            const containers = document.querySelectorAll('.variant-container');
            const container = containers[containers.length - 1];
            
            container.querySelector('.variant-title').value = variantData.title || '';
            container.querySelector('.variant-sku').value = variantData.sku || '';
            container.querySelector('.variant-price').value = variantData.price || '';
            container.querySelector('.variant-compare-price').value = variantData.compareAtPrice || '';
            
            // Restore inventory
            variantData.inventory.forEach(inv => {
                const input = container.querySelector(`.inventory-input[data-location="${inv.location}"]`);
                if (input) input.value = inv.quantity || 0;
            });
        });
        
        return true;
    } catch (error) {
        console.error('Error restoring form data:', error);
        return false;
    }
}

    if (restoreFormData()) {
        console.log('Form data restored');
    }
});
</script>
<%- include('../layouts/footer') %>
